{
  "name": "ical-generator",
  "description": "ical-generator is a small piece of code which generates ical calendar files",
  "author": {
    "name": "Sebastian Pekarek",
    "email": "mail@sebbo.net"
  },
  "version": "0.1.5",
  "bugs": {
    "url": "http://github.com/sebbo2002/ical-generator/issues",
    "email": "bugs@sebbo.net"
  },
  "dependencies": {},
  "devDependencies": {
    "mocha": "~1.13"
  },
  "scripts": {
    "test": "mocha -R spec"
  },
  "preferGlobal": false,
  "main": "./lib/ical-generator.js",
  "repository": {
    "type": "git",
    "url": "http://github.com/sebbo2002/ical-generator.git"
  },
  "readme": "# ical-generator\n\n[![Build Status](https://travis-ci.org/sebbo2002/ical-generator.png?branch=master)](https://travis-ci.org/sebbo2002/ical-generator)\n\nical-generator is a small piece of code which generates ical calendar files. I use this to generate subscriptionable calendar feeds.\n\n\n## Installation\n\n\tnpm install ical-generator\n\n\n## Example\n\n```javascript\nvar ical = require('ical-generator'),\n\thttp = require('http'),\n\tcal = ical();\n\ncal.setDomain('sebbo.net').setName('my first iCal');\n\ncal.addEvent({\n\tstart: new Date(),\n\tend: new Date(new Date().getTime() + 3600000),\n\tsummary: 'Example Event',\n\tdescription: 'It works ;)',\n\tlocation: 'my room',\n\turl: 'http://sebbo.net/'\n});\n\nhttp.createServer(function(req, res) {\n\tcal.serve(res);\n}).listen(3000, '127.0.0.1');\nconsole.log('Server running at http://127.0.0.1:3000/');\n```\n\n\n\n## API\n\n### setDomain(domain)\n\nUse this method to set your server's hostname. It will be used to generate the feed's UID. Default hostname is localhost.\n\n\n### setName(name)\n\nUse this method to set your feed's name.\n\n\n### setProdID(prodID)\n\nThis method is used to overwrite the default ProdID:\n\n```javascript\ncal.setProdID({\n\tcompany: 'My Company',\n\tproduct: 'My Product',\n\tlanguage: 'EN'\n});\n```\n\n\n### addEvent(options)\nAdd an event. Options is an plain object, that configure the event.\n\n#### options.uid (String)\nEvent UID. If not set, an UID will be generated randomly.\n\n#### options.start (Date Object, required)\nAppointment date of beginning\n\n#### options.end (Date Object, required)\nAppointment date of end\n\n#### options.stamp (Date Object)\nAppointment date of creation\n\n#### options.summary (String, required)\nAppointment summary\n\n#### options.description (String)\nAppointment description\n\n#### options.location (String)\nAppointment location\n\n#### options.organizer (Plain Object)\nAppointment organizer\n\n```javascript\ncal.addEvent({\n\tstart: new Date(),\n\tend: new Date(new Date().getTime() + 3600000),\n\tsummary: 'Example Event',\n\tdescription: 'Appointment with Organizer',\n\tlocation: 'Room 123',\n\torganizer: {\n\t\tname: 'Organizer\\'s Name',\n\t\temail: 'organizer@example.com'\n\t}\n});\n```\n\n#### options.url (String)\nAppointment Website\n\n\n### save(file[, cb])\nSave Calendar to disk asynchronously using [fs.writeFile](http://nodejs.org/api/fs.html#fs_fs_writefile_filename_data_options_callback)\n\n\n### saveSync(file)\nSave Calendar to disk synchronously using [fs.writeFileSync](http://nodejs.org/api/fs.html#fs_fs_writefilesync_filename_data_options)\n\n\n### serve(response)\nSend Calendar to the User when using HTTP. See example above.\n\n\n### toString()\nReturn Calendar as a String.\n\n### clear()\nEmpty the Calender.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/sebbo2002/ical-generator",
  "_id": "ical-generator@0.1.5",
  "dist": {
    "shasum": "791fb2ae3ed5623daa9d7f87ed11d5573f979352"
  },
  "_from": "ical-generator@",
  "_resolved": "https://registry.npmjs.org/ical-generator/-/ical-generator-0.1.5.tgz"
}
